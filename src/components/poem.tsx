import { useState, useEffect } from "react";

const PoenCard = (props) => {
  const [row, setRow] = useState(0);
  const [col, setCol] = useState(0);
  const [playing, setPlaying] = useState(false);
  const [wrongInput, setWrongInput] = useState(false);
  const [correctCount, setCorrectCount] = useState(0);
  const [wrongCount, setWrongCount] = useState(0);
  const [completed, setCompleted] = useState(false);
  const [car, setCar] = useState(0);

  const enlines = [
    "Wake! For the Sun, who scatter'd into flight",
    "The Stars before him from the Field of Night,",
    "Drives Night along with them from Heav'n, and strikes",
    "The Sultan's Turret with a Shaft of Light.",
  ];

  const amlines = [
    "Abebe ·â†·à∂ ·â†·àã?",
    "·ä•·åç·ãö·ä†·â•·àÑ·à≠ ·àò·àç·ä´·àù ·äê·ãç·ç£ ·â†·àò·ä®·à´ ·âÄ·äï·àù ·àò·à∏·à∏·åç·ã´ ·äê·ãç·ç¢",
    "·àò·àô·àö·àõ·àú·àù·àû",
    "·â† ·â° ·â¢ ·â£ ·â§ ·â• ·â¶"
  ];

  const lines = props.lang ? amlines : enlines;
  // Mapping of Amharic characters to their corresponding English words
  const mapping = {
    a: "a", A: "A", b: "b", B: "B", c: "c", C: "C", d: "d", D: "D", e: "e", E: "E", f: "f", F: "F", g: "g", G: "G", h: "h", H: "H", i: "i", I: "I", j: "j", J: "J", k: "k", K: "K", l: "l", L: "L", m: "m", M: "M", n: "n", N: "N", o: "o", O: "O", p: "p", P: "P", q: "q", Q: "Q", r: "r", R: "R", s: "s", S: "S", t: "t", T: "T", u: "u", U: "U", v: "v", V: "V", w: "w", W: "W", x: "x", X: "X", y: "y", Y: "Y", z: "z", Z: "Z",
    ".": ".", ",": ",", ";": ";", ":": ":", "?": "?", "!": "!", "'": "'", '"': '"', "(": "(", ")": ")", "[": "[", "]": "]", "{": "{", "}": "}", "<": "<", ">": ">", "/": "/", "\\": "\\", "|": "|", "-": "-", _: "_", "+": "+", "=": "=", "*": "*", "&": "&", "^": "^", "%": "%", $: "$", "#": "#", "@": "@", "~": "~", "`": "`",
    "·àÄ": "h√§",
    "·àÅ": "hu",
    "·àÇ": "hi",
    "·àÉ": "ha",
    "·àÑ": "h√©",
    "·àÖ": "h",
    "·àÜ": "ho",
    "·àà": "l√§",
    "·àâ": "lu",
    "·àä": "li",
    "·àã": "la",
    "·àå": "l√©",
    "·àç": "l",
    "·àé": "lo",
    "·àê": "·∏•√§",
    "·àë": "·∏•u",
    "·àí": "·∏•i",
    "·àì": "·∏•a",
    "·àî": "·∏•√©",
    "·àï": "·∏•",
    "·àñ": "·∏•o",
    "·àò": "m√§",
    "·àô": "mu",
    "·àö": "mi",
    "·àõ": "ma",
    "·àú": "m√©",
    "·àù": "m",
    "·àû": "mo",
    "·à†": "≈õ√§",
    "·à°": "≈õu",
    "·à¢": "≈õi",
    "·à£": "≈õa",
    "·à§": "≈õ√©",
    "·à•": "≈õ",
    "·à¶": "≈õo",
    "·à®": "r√§",
    "·à©": "ru",
    "·à™": "ri",
    "·à´": "ra",
    "·à¨": "r√©",
    "·à≠": "r",
    "·àÆ": "ro",
    "·à∞": "s√§",
    "·à±": "su",
    "·à≤": "si",
    "·à≥": "sa",
    "·à¥": "s√©",
    "·àµ": "s",
    "·à∂": "so",
    "·à∏": "≈°√§",
    "·àπ": "≈°u",
    "·à∫": "≈°i",
    "·àª": "≈°a",
    "·àº": "≈°√©",
    "·àΩ": "≈°",
    "·àæ": "≈°o",
    "·âÄ": "q√§",
    "·âÅ": "qu",
    "·âÇ": "qi",
    "·âÉ": "qa",
    "·âÑ": "q√©",
    "·âÖ": "q",
    "·âÜ": "qo",
    "·â†": "b√§",
    "·â°": "bu",
    "·â¢": "bi",
    "·â£": "ba",
    "·â§": "b√©",
    "·â•": "b",
    "·â¶": "bo",
    "·â®": "v√§",
    "·â©": "vu",
    "·â™": "vi",
    "·â´": "va",
    "·â¨": "v√©",
    "·â≠": "v",
    "·âÆ": "vo",
    "·â∞": "t√§",
    "·â±": "tu",
    "·â≤": "ti",
    "·â≥": "ta",
    "·â¥": "t√©",
    "·âµ": "t",
    "·â∂": "to",
    "·â∏": "ƒçÃ£√§",
    "·âπ": "ƒçÃ£u",
    "·â∫": "ƒçÃ£i",
    "·âª": "ƒçÃ£a",
    "·âº": "ƒçÃ£√©",
    "·âΩ": "ƒçÃ£",
    "·âæ": "ƒçÃ£o",
    "·äÄ": "·∏´√§",
    "·äÅ": "·∏´u",
    "·äÇ": "·∏´i",
    "·äÉ": "·∏´a",
    "·äÑ": "·∏´√©",
    "·äÖ": "·∏´",
    "·äÜ": "·∏´o",
    "·äê": "n√§",
    "·äë": "nu",
    "·äí": "ni",
    "·äì": "na",
    "·äî": "n√©",
    "·äï": "n",
    "·äñ": "no",
    "·äò": "√±√§",
    "·äô": "√±u",
    "·äö": "√±i",
    "·äõ": "√±a",
    "·äú": "√±√©",
    "·äù": "√±",
    "·äû": "√±o",
    "·ä†": " æ√§",
    "·ä°": " æu",
    "·ä¢": " æi",
    "·ä£": " æa",
    "·ä§": " æ√©",
    "·ä•": " æ",
    "·ä¶": " æo",
    "·ä®": "k√§",
    "·ä©": "ku",
    "·ä™": "ki",
    "·ä´": "ka",
    "·ä¨": "k√©",
    "·ä≠": "k",
    "·äÆ": "ko",
    "·ä∞": "k ∑√§",
    "·ä≤": "k ∑i",
    "·ä≥": "k ∑a",
    "·ä¥": "k ∑√©",
    "·äµ": "k ∑",
    "·ä∏": "·∏µ√§",
    "·äπ": "·∏µu",
    "·ä∫": "·∏µi",
    "·äª": "·∏µa",
    "·äº": "·∏µ√©",
    "·äΩ": "·∏µ",
    "·äæ": "·∏µo",
    "·ãÄ": "·∏µ ∑√§",
    "·ãÇ": "·∏µ ∑i",
    "·ãÉ": "·∏µ ∑a",
    "·ãÑ": "·∏µ ∑√©",
    "·ãÖ": "·∏µ ∑",
    "·ãà": "w√§",
    "·ãâ": "wu",
    "·ãä": "wi",
    "·ãã": "wa",
    "·ãå": "w√©",
    "·ãç": "w",
    "·ãé": "wo",
    "·ãê": " ø√§",
    "·ãë": " øu",
    "·ãí": " øi",
    "·ãì": " øa",
    "·ãî": " ø√©",
    "·ãï": " ø",
    "·ãñ": " øo",
    "·ãò": "z√§",
    "·ãô": "zu",
    "·ãö": "zi",
    "·ãõ": "za",
    "·ãú": "z√©",
    "·ãù": "z",
    "·ãû": "zo",
    "·ã†": "≈æ√§",
    "·ã°": "≈æu",
    "·ã¢": "≈æi",
    "·ã£": "≈æa",
    "·ã§": "≈æ√©",
    "·ã•": "≈æ",
    "·ã¶": "≈æo",
    "·ã®": "y√§",
    "·ã©": "yu",
    "·ã™": "yi",
    "·ã´": "ya",
    "·ã¨": "y√©",
    "·ã≠": "y",
    "·ãÆ": "yo",
    "·ã∞": "d√§",
    "·ã±": "du",
    "·ã≤": "di",
    "·ã≥": "da",
    "·ã¥": "d√©",
    "·ãµ": "d",
    "·ã∂": "do",
    "·åÄ": "«ß√§",
    "·åÅ": "«ßu",
    "·åÇ": "«ßi",
    "·åÉ": "«ßa",
    "·åÑ": "«ß√©",
    "·åÖ": "«ß",
    "·åÜ": "«ßo",
    "·åà": "g√§",
    "·åâ": "gu",
    "·åä": "gi",
    "·åã": "ga",
    "·åå": "g√©",
    "·åç": "g",
    "·åé": "go",
    "·åê": "g ∑√§",
    "·åí": "g ∑i",
    "·åì": "g ∑a",
    "·åî": "g ∑√©",
    "·åï": "g ∑",
    "·å†": "·π≠√§",
    "·å°": "·π≠u",
    "·å¢": "·π≠i",
    "·å£": "·π≠a",
    "·å§": "·π≠√©",
    "·å•": "·π≠",
    "·å¶": "·π≠o",
    "·å®": "ƒçÃ£√§",
    "·å©": "ƒçÃ£u",
    "·å™": "ƒçÃ£i",
    "·å´": "ƒçÃ£a",
    "·å¨": "ƒçÃ£√©",
    "·å≠": "ƒçÃ£",
    "·åÆ": "ƒçÃ£o",
    "·å∞": "pÃ£√§",
    "·å±": "pÃ£u",
    "·å≤": "pÃ£i",
    "·å≥": "pÃ£a",
    "·å¥": "pÃ£√©",
    "·åµ": "pÃ£",
    "·å∂": "pÃ£o",
    "·å∏": "·π£√§",
    "·åπ": "·π£u",
    "·å∫": "·π£i",
    "·åª": "·π£a",
    "·åº": "·π£√©",
    "·åΩ": "·π£",
    "·åæ": "·π£o",
    "·çÄ": "·π£ÃÅ√§",
    "·çÅ": "·π£ÃÅu",
    "·çÇ": "·π£ÃÅi",
    "·çÉ": "·π£ÃÅa",
    "·çÑ": "·π£ÃÅ√©",
    "·çÖ": "·π£ÃÅ",
    "·çÜ": "·π£ÃÅo",
    "·çà": "f√§",
    "·çâ": "fu",
    "·çä": "fi",
    "·çã": "fa",
    "·çå": "f√©",
    "·çç": "f",
    "·çé": "fo",
    "·çê": "p√§",
    "·çë": "pu",
    "·çí": "pi",
    "·çì": "pa",
    "·çî": "p√©",
    "·çï": "p",
    "·çñ": "po",
    " ": " ", "·ç¢": ".", "·ç°": " ", "·ç£": ",", "·ç§": ";", "·ç•": ":", "·ç¶": ":", "·çß": "?", "·ç®": "\n", "·ç†": "¬ß", "·ç©": "1", "·ç™": "2", "·ç´": "3", "·ç¨": "4", "·ç≠": "5", "·çÆ": "6", "·çØ": "7", "·ç∞": "8", "·ç±": "9", "·ç≤": "10", "·ç≥": "20", "·ç¥": "30", "·çµ": "40", "·ç∂": "50", "·ç∑": "60", "·ç∏": "70", "·çπ": "80", "·ç∫": "90", "·çª": "100", "·çº": "10000",    // Add more mappings as needed
  };

  const handleKeyPress = (event) => {
    const { key } = event;

    if (key.length > 1 || completed) return;

    const expected = mapping[lines[row][col]][car];

    if (expected === key) {
      setWrongInput(false);
      setCorrectCount((prevCount) => prevCount + 1);
      if (car === mapping[lines[row][col]].length - 1) {
        if (col === lines[row].length - 1) {
          if (row === lines.length - 1) {
            setCompleted(true);
            return;
          }
          setRow((prevRow) => prevRow + 1);
          setCol(0);
          setCar(0);
        } else {
          setCol((prevCol) => prevCol + 1);
          setCar(0);
        }
      } else {
        setCar((prevCar) => prevCar + 1);
      }
    } else {
      setWrongInput(true);
      setWrongCount((prevCount) => prevCount + 1);
    }
  };

  return (
    <div className="flex flex-col items-center">
      <div
        onFocus={() => setPlaying(true)}
        onBlur={() => setPlaying(false)}
        tabIndex={0}
        onKeyDownCapture={handleKeyPress}
        className="flex items-center justify-center mt-10 outline-none"
      >
        {!playing ? (
          <p className="text-2xl">Click Here</p>
        ) : (
          <>
            <p>
              {lines.map((line, i) => (
                <p key={i}>{i === row ? "üëâ" : " "}&nbsp;&nbsp;</p>
              ))}
            </p>
            <p>
              {lines.map((line, i) =>
                i !== row ? (
                  <p key={i} className="opacity-40">
                    {line}
                  </p>
                ) : (
                  <p key={i}>
                    {line.split("").map((char, j) =>
                      j === col ? (
                        <span
                          key={j}
                          className={`opacity-50 underline ${wrongInput ? "text-red-700" : ""
                            }`}
                        >
                          {char}
                        </span>
                      ) : (
                        <span
                          key={j}
                          className={col >= j ? "opacity-100" : "opacity-40"}
                        >
                          {char}
                        </span>
                      )
                    )}
                  </p>
                )
              )}
            </p>
          </>
        )}
      </div>
      {completed && (
        <div className="mt-4 p-2 bg-gray-200 text-center">
          <p>Results:</p>
          <p>Correct Inputs: {correctCount}</p>
          <p>Wrong Inputs: {wrongCount}</p>
        </div>
      )}
    </div>
  );
};

export default PoenCard;
